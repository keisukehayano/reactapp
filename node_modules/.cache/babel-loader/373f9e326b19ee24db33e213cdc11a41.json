{"ast":null,"code":"import axios from 'axios';\nexport class ApiClient {\n  constructor(baseURL = '') {\n    this.axiosInstance = void 0;\n    this.axiosInstance = axios.create({\n      baseURL\n    });\n    this.axiosInstance.interceptors.request.use(async config => {\n      return config;\n    }, err => {\n      return Promise.reject(err);\n    });\n  }\n\n  async get(path, params = {}) {\n    try {\n      const result = await this.axiosInstance.get(path, {\n        params\n      });\n      return this.createSuccessPromise(result.data);\n    } catch (e) {\n      return this.createFailurePromise(e);\n    }\n  }\n\n  async post(path, params = {}) {\n    try {\n      const result = await this.axiosInstance.post(path, params);\n      return this.createSuccessPromise(result.data);\n    } catch (e) {\n      return this.createFailurePromise(e);\n    }\n  }\n\n  async put(path, params = {}) {\n    try {\n      const result = await this.axiosInstance.put(path, params);\n      return this.createSuccessPromise(result.data);\n    } catch (e) {\n      return this.createFailurePromise(e);\n    }\n  }\n\n  async delete(path) {\n    try {\n      const result = await this.axiosInstance.delete(path);\n      return this.createSuccessPromise(result.data);\n    } catch (e) {\n      return this.createFailurePromise(e);\n    }\n  }\n\n  async patch(path, params = {}) {\n    try {\n      const result = await this.axiosInstance.patch(path, params);\n      return this.createSuccessPromise(result.data);\n    } catch (e) {\n      return this.createFailurePromise(e);\n    }\n  }\n\n  createSuccessPromise(data) {\n    return Promise.resolve({\n      data,\n      isSuccess: true\n    });\n  }\n\n  createFailurePromise(error) {\n    return Promise.resolve({\n      error,\n      isSuccess: false\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/ohs80340/ReactApp/reactapp/src/apiClient/index.ts"],"names":["axios","ApiClient","constructor","baseURL","axiosInstance","create","interceptors","request","use","config","err","Promise","reject","get","path","params","result","createSuccessPromise","data","e","createFailurePromise","post","put","delete","patch","resolve","isSuccess","error"],"mappings":"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","sourcesContent":["import axios, { AxiosError, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nimport { AxiosResponse } from '../types/responses/axios';\n\nexport class ApiClient {\n  axiosInstance: AxiosInstance;\n  constructor(baseURL = '') {\n    this.axiosInstance = axios.create({ baseURL });\n\n    this.axiosInstance.interceptors.request.use(\n      async (config: AxiosRequestConfig) => {\n        return config;\n      },\n      (err: AxiosError) => {\n        return Promise.reject(err);\n      },\n    );\n  }\n  async get<T>(path: string, params = {}): Promise<AxiosResponse<T>> {\n    try {\n      const result = await this.axiosInstance.get(path, { params });\n      return this.createSuccessPromise<T>(result.data);\n    } catch (e) {\n      return this.createFailurePromise<T>(e);\n    }\n  }\n  async post<T>(path: string, params = {}): Promise<AxiosResponse<T>> {\n    try {\n      const result = await this.axiosInstance.post<T>(path, params);\n      return this.createSuccessPromise<T>(result.data);\n    } catch (e) {\n      return this.createFailurePromise<T>(e);\n    }\n  }\n  async put<T>(path: string, params = {}): Promise<AxiosResponse<T>> {\n    try {\n      const result = await this.axiosInstance.put<T>(path, params);\n      return this.createSuccessPromise<T>(result.data);\n    } catch (e) {\n      return this.createFailurePromise<T>(e);\n    }\n  }\n  async delete<T>(path: string): Promise<AxiosResponse<T>> {\n    try {\n      const result = await this.axiosInstance.delete(path);\n      return this.createSuccessPromise<T>(result.data);\n    } catch (e) {\n      return this.createFailurePromise<T>(e);\n    }\n  }\n  async patch<T>(path: string, params = {}): Promise<AxiosResponse<T>> {\n    try {\n      const result = await this.axiosInstance.patch<T>(path, params);\n      return this.createSuccessPromise<T>(result.data);\n    } catch (e) {\n      return this.createFailurePromise<T>(e);\n    }\n  }\n  private createSuccessPromise<T>(data: T): Promise<AxiosResponse<T>> {\n    return Promise.resolve<AxiosResponse<T>>({ data, isSuccess: true });\n  }\n  private createFailurePromise<T>(error: AxiosError): Promise<AxiosResponse<T>> {\n    return Promise.resolve<AxiosResponse<T>>({ error, isSuccess: false });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}