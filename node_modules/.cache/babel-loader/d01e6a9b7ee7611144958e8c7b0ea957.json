{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createLogger } from 'redux-logger';\nimport { createBrowserHistory } from 'history';\nimport createSagaMiddleware from 'redux-saga';\nimport { isImmutable } from 'immutable';\nimport { rootReducer } from './reducers';\nimport { rootSaga } from './sagas';\nconst logger = createLogger({\n  diff: true,\n  duration: true,\n  stateTransformer: state => {\n    const newState = {};\n\n    for (const key in state) {\n      const targetState = state[key];\n\n      if (isImmutable(targetState)) {\n        newState[key] = targetState.toJS();\n      } else {\n        newState[key] = targetState;\n      }\n    }\n\n    return newState;\n  }\n});\nconst sagaMiddleware = createSagaMiddleware();\nexport const history = createBrowserHistory();\nexport function configureStore(preloadedState) {\n  const middlewares = [routerMiddleware(history), sagaMiddleware, logger];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n  const store = createStore(rootReducer(history), preloadedState, middlewareEnhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n}","map":{"version":3,"sources":["/Users/ohs80340/ReactApp/reactapp/src/configureStore.tsx"],"names":["applyMiddleware","createStore","routerMiddleware","createLogger","createBrowserHistory","createSagaMiddleware","isImmutable","rootReducer","rootSaga","logger","diff","duration","stateTransformer","state","newState","key","targetState","toJS","sagaMiddleware","history","configureStore","preloadedState","middlewares","middlewareEnhancer","store","run"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA,SAAgBC,WAAhB,QAAmC,YAAnC;AACA,SAASC,QAAT,QAAyB,SAAzB;AAGA,MAAMC,MAAM,GAAGN,YAAY,CAAC;AAC1BO,EAAAA,IAAI,EAAE,IADoB;AAE1BC,EAAAA,QAAQ,EAAE,IAFgB;AAG1BC,EAAAA,gBAAgB,EAAGC,KAAD,IAAkB;AAClC,UAAMC,QAAkB,GAAG,EAA3B;;AACA,SAAK,MAAMC,GAAX,IAAkBF,KAAlB,EAAyB;AACvB,YAAMG,WAAW,GAAGH,KAAK,CAACE,GAAD,CAAzB;;AACA,UAAIT,WAAW,CAACU,WAAD,CAAf,EAA8B;AAC5BF,QAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgBC,WAAW,CAACC,IAAZ,EAAhB;AACD,OAFD,MAEO;AACLH,QAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgBC,WAAhB;AACD;AACF;;AACD,WAAOF,QAAP;AACD;AAdyB,CAAD,CAA3B;AAiBA,MAAMI,cAAc,GAAGb,oBAAoB,EAA3C;AAEA,OAAO,MAAMc,OAAO,GAAGf,oBAAoB,EAApC;AAEP,OAAO,SAASgB,cAAT,CAAwBC,cAAxB,EAAgD;AACrD,QAAMC,WAAW,GAAG,CAACpB,gBAAgB,CAACiB,OAAD,CAAjB,EAA4BD,cAA5B,EAA4CT,MAA5C,CAApB;AACA,QAAMc,kBAAkB,GAAGvB,eAAe,CAAC,GAAGsB,WAAJ,CAA1C;AACA,QAAME,KAAK,GAAGvB,WAAW,CAACM,WAAW,CAACY,OAAD,CAAZ,EAAuBE,cAAvB,EAAuCE,kBAAvC,CAAzB;AACAL,EAAAA,cAAc,CAACO,GAAf,CAAmBjB,QAAnB;AACA,SAAOgB,KAAP;AACD","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createLogger } from 'redux-logger';\nimport { createBrowserHistory } from 'history';\nimport createSagaMiddleware from 'redux-saga';\nimport { isImmutable } from 'immutable';\n\nimport { State, rootReducer } from './reducers';\nimport { rootSaga } from './sagas';\nimport { JSObject } from './types/Common';\n\nconst logger = createLogger({\n  diff: true,\n  duration: true,\n  stateTransformer: (state: State) => {\n    const newState: JSObject = {};\n    for (const key in state) {\n      const targetState = state[key as keyof State];\n      if (isImmutable(targetState)) {\n        newState[key] = targetState.toJS();\n      } else {\n        newState[key] = targetState;\n      }\n    }\n    return newState;\n  },\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const history = createBrowserHistory();\n\nexport function configureStore(preloadedState?: State) {\n  const middlewares = [routerMiddleware(history), sagaMiddleware, logger];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n  const store = createStore(rootReducer(history), preloadedState, middlewareEnhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}