{"ast":null,"code":"import { List, Record } from 'immutable';\nimport dayjs from 'dayjs';\nexport class ImageLinks extends Record({\n  smallThumbnail: '',\n  thumbnail: ''\n}) {\n  static fromResponse(response) {\n    const params = { ...response\n    };\n    return new ImageLinks(params);\n  }\n\n}\nexport class VolumeInfo extends Record({\n  title: '',\n  subtitle: '',\n  authors: List(),\n  publisher: '',\n  publishedDate: dayjs(),\n  description: '',\n  imageLinks: new ImageLinks(),\n  previewLink: '',\n  infoLink: '',\n  canonicalVolumeLink: ''\n}) {\n  static fromResponse(response) {\n    const params = { ...response\n    };\n    params.authors = List(params.authors);\n    params.publishedDate = dayjs(params.publishedDate);\n    params.imageLinks = ImageLinks.fromResponse(params.imageLinks);\n    return new VolumeInfo(params);\n  }\n\n  get descriptionWithNewLine() {\n    return this.description.replace('。 ', '\\n');\n  }\n\n  get publishedDateString() {\n    return this.publishedDate.format('YYYY/MM/DD');\n  }\n\n}\nexport class Volume extends Record({\n  id: 0,\n  selfLink: '',\n  volumeInfo: new VolumeInfo()\n}) {\n  static fromResponse(response) {\n    const params = { ...response\n    };\n    params.volumeInfo = VolumeInfo.fromResponse(params.volumeInfo);\n    return new Volume(params);\n  }\n\n}\nexport class VolumeList extends Record({\n  kind: '',\n  totalItems: 0,\n  items: List()\n}) {\n  static fromResponse(response) {\n    const params = { ...response\n    };\n    params.items = List(params.items.map(item => Volume.fromResponse(item)));\n    return new VolumeList(params);\n  }\n\n}","map":{"version":3,"sources":["/Users/ohs80340/ReactApp/reactapp/src/models/Volume.ts"],"names":["List","Record","dayjs","ImageLinks","smallThumbnail","thumbnail","fromResponse","response","params","VolumeInfo","title","subtitle","authors","publisher","publishedDate","description","imageLinks","previewLink","infoLink","canonicalVolumeLink","descriptionWithNewLine","replace","publishedDateString","format","Volume","id","selfLink","volumeInfo","VolumeList","kind","totalItems","items","map","item"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,WAA7B;AACA,OAAOC,KAAP,MAA6B,OAA7B;AAIA,OAAO,MAAMC,UAAN,SAAyBF,MAAM,CAGnC;AACDG,EAAAA,cAAc,EAAE,EADf;AAEDC,EAAAA,SAAS,EAAE;AAFV,CAHmC,CAA/B,CAMJ;AACD,SAAOC,YAAP,CAAoBC,QAApB,EAAwC;AACtC,UAAMC,MAAM,GAAG,EAAE,GAAGD;AAAL,KAAf;AACA,WAAO,IAAIJ,UAAJ,CAAeK,MAAf,CAAP;AACD;;AAJA;AAOH,OAAO,MAAMC,UAAN,SAAyBR,MAAM,CAWnC;AACDS,EAAAA,KAAK,EAAE,EADN;AAEDC,EAAAA,QAAQ,EAAE,EAFT;AAGDC,EAAAA,OAAO,EAAEZ,IAAI,EAHZ;AAIDa,EAAAA,SAAS,EAAE,EAJV;AAKDC,EAAAA,aAAa,EAAEZ,KAAK,EALnB;AAMDa,EAAAA,WAAW,EAAE,EANZ;AAODC,EAAAA,UAAU,EAAE,IAAIb,UAAJ,EAPX;AAQDc,EAAAA,WAAW,EAAE,EARZ;AASDC,EAAAA,QAAQ,EAAE,EATT;AAUDC,EAAAA,mBAAmB,EAAE;AAVpB,CAXmC,CAA/B,CAsBJ;AACD,SAAOb,YAAP,CAAoBC,QAApB,EAAwC;AACtC,UAAMC,MAAM,GAAG,EAAE,GAAGD;AAAL,KAAf;AACAC,IAAAA,MAAM,CAACI,OAAP,GAAiBZ,IAAI,CAACQ,MAAM,CAACI,OAAR,CAArB;AACAJ,IAAAA,MAAM,CAACM,aAAP,GAAuBZ,KAAK,CAACM,MAAM,CAACM,aAAR,CAA5B;AACAN,IAAAA,MAAM,CAACQ,UAAP,GAAoBb,UAAU,CAACG,YAAX,CAAwBE,MAAM,CAACQ,UAA/B,CAApB;AACA,WAAO,IAAIP,UAAJ,CAAeD,MAAf,CAAP;AACD;;AACD,MAAIY,sBAAJ,GAA6B;AAC3B,WAAO,KAAKL,WAAL,CAAiBM,OAAjB,CAAyB,IAAzB,EAA+B,IAA/B,CAAP;AACD;;AACD,MAAIC,mBAAJ,GAA0B;AACxB,WAAO,KAAKR,aAAL,CAAmBS,MAAnB,CAA0B,YAA1B,CAAP;AACD;;AAbA;AAgBH,OAAO,MAAMC,MAAN,SAAqBvB,MAAM,CAI/B;AACDwB,EAAAA,EAAE,EAAE,CADH;AAEDC,EAAAA,QAAQ,EAAE,EAFT;AAGDC,EAAAA,UAAU,EAAE,IAAIlB,UAAJ;AAHX,CAJ+B,CAA3B,CAQJ;AACD,SAAOH,YAAP,CAAoBC,QAApB,EAAwC;AACtC,UAAMC,MAAM,GAAG,EAAE,GAAGD;AAAL,KAAf;AACAC,IAAAA,MAAM,CAACmB,UAAP,GAAoBlB,UAAU,CAACH,YAAX,CAAwBE,MAAM,CAACmB,UAA/B,CAApB;AACA,WAAO,IAAIH,MAAJ,CAAWhB,MAAX,CAAP;AACD;;AALA;AAQH,OAAO,MAAMoB,UAAN,SAAyB3B,MAAM,CAInC;AACD4B,EAAAA,IAAI,EAAE,EADL;AAEDC,EAAAA,UAAU,EAAE,CAFX;AAGDC,EAAAA,KAAK,EAAE/B,IAAI;AAHV,CAJmC,CAA/B,CAQJ;AACD,SAAOM,YAAP,CAAoBC,QAApB,EAAwC;AACtC,UAAMC,MAAM,GAAG,EAAE,GAAGD;AAAL,KAAf;AACAC,IAAAA,MAAM,CAACuB,KAAP,GAAe/B,IAAI,CAACQ,MAAM,CAACuB,KAAP,CAAaC,GAAb,CAAkBC,IAAD,IAAoBT,MAAM,CAAClB,YAAP,CAAoB2B,IAApB,CAArC,CAAD,CAAnB;AACA,WAAO,IAAIL,UAAJ,CAAepB,MAAf,CAAP;AACD;;AALA","sourcesContent":["import { List, Record } from 'immutable';\nimport dayjs, { Dayjs } from 'dayjs';\n\nimport { JSObject } from '../types/Common';\n\nexport class ImageLinks extends Record<{\n  smallThumbnail: string;\n  thumbnail: string;\n}>({\n  smallThumbnail: '',\n  thumbnail: '',\n}) {\n  static fromResponse(response: JSObject) {\n    const params = { ...response };\n    return new ImageLinks(params);\n  }\n}\n\nexport class VolumeInfo extends Record<{\n  title: string;\n  subtitle: string;\n  authors: List<string>;\n  publisher: string;\n  publishedDate: Dayjs;\n  description: string;\n  imageLinks: ImageLinks;\n  previewLink: string;\n  infoLink: string;\n  canonicalVolumeLink: string;\n}>({\n  title: '',\n  subtitle: '',\n  authors: List(),\n  publisher: '',\n  publishedDate: dayjs(),\n  description: '',\n  imageLinks: new ImageLinks(),\n  previewLink: '',\n  infoLink: '',\n  canonicalVolumeLink: '',\n}) {\n  static fromResponse(response: JSObject) {\n    const params = { ...response };\n    params.authors = List(params.authors);\n    params.publishedDate = dayjs(params.publishedDate);\n    params.imageLinks = ImageLinks.fromResponse(params.imageLinks);\n    return new VolumeInfo(params);\n  }\n  get descriptionWithNewLine() {\n    return this.description.replace('。 ', '\\n');\n  }\n  get publishedDateString() {\n    return this.publishedDate.format('YYYY/MM/DD');\n  }\n}\n\nexport class Volume extends Record<{\n  id: number;\n  selfLink: string;\n  volumeInfo: VolumeInfo;\n}>({\n  id: 0,\n  selfLink: '',\n  volumeInfo: new VolumeInfo(),\n}) {\n  static fromResponse(response: JSObject) {\n    const params = { ...response };\n    params.volumeInfo = VolumeInfo.fromResponse(params.volumeInfo);\n    return new Volume(params);\n  }\n}\n\nexport class VolumeList extends Record<{\n  kind: string;\n  totalItems: number;\n  items: List<Volume>;\n}>({\n  kind: '',\n  totalItems: 0,\n  items: List(),\n}) {\n  static fromResponse(response: JSObject) {\n    const params = { ...response };\n    params.items = List(params.items.map((item: JSObject) => Volume.fromResponse(item)));\n    return new VolumeList(params);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}